// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Insurance.Specflow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class InsuranceFeature : object, Xunit.IClassFixture<InsuranceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Insurance.feature"
#line hidden
        
        public InsuranceFeature(InsuranceFeature.FixtureData fixtureData, Insurance_Specflow_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Insurance", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "SalesPrice",
                        "ProductTypeId"});
            table1.AddRow(new string[] {
                        "1",
                        "Canon EOS 77D + 18-55mm IS STM",
                        "0",
                        "1"});
            table1.AddRow(new string[] {
                        "2",
                        "Lenovo Chromebook C330-11 81HY000MMH",
                        "500",
                        "2"});
            table1.AddRow(new string[] {
                        "3",
                        "OnePlus 8 Pro 128GB Black 5G",
                        "2000",
                        "3"});
            table1.AddRow(new string[] {
                        "4",
                        "Sony CyberShot 1",
                        "0",
                        "4"});
            table1.AddRow(new string[] {
                        "5",
                        "Sony CyberShot 2",
                        "0",
                        "4"});
#line 4
 testRunner.Given("the following Products were available", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "CanBeInsured"});
            table2.AddRow(new string[] {
                        "1",
                        "SLR cameras",
                        "true"});
            table2.AddRow(new string[] {
                        "2",
                        "Laptops",
                        "true"});
            table2.AddRow(new string[] {
                        "3",
                        "Smartphones",
                        "true"});
            table2.AddRow(new string[] {
                        "4",
                        "Digital cameras",
                        "true"});
#line 12
 testRunner.And("the following ProductTypes were available", ((string)(null)), table2, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Order Insurance Calculation")]
        [Xunit.TraitAttribute("FeatureTitle", "Insurance")]
        [Xunit.TraitAttribute("Description", "Order Insurance Calculation")]
        public virtual void OrderInsuranceCalculation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order Insurance Calculation", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table3.AddRow(new string[] {
                            "1"});
                table3.AddRow(new string[] {
                            "2"});
                table3.AddRow(new string[] {
                            "3"});
                table3.AddRow(new string[] {
                            "4"});
                table3.AddRow(new string[] {
                            "5"});
#line 20
 testRunner.Given("the following products were available in the order", ((string)(null)), table3, "Given ");
#line hidden
#line 27
 testRunner.When("insurance is calculated for the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then("the insurance value is 4500", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                InsuranceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                InsuranceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
